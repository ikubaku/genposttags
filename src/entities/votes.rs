//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Votes")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_name = "PostId")]
    pub post_id: i32,
    #[sea_orm(column_name = "VoteTypeId")]
    pub vote_type_id: Option<i8>,
    #[sea_orm(column_name = "UserId")]
    pub user_id: Option<i32>,
    #[sea_orm(column_name = "CreationDate")]
    pub creation_date: Option<DateTime>,
    #[sea_orm(column_name = "BountyAmount")]
    pub bounty_amount: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::posts::Entity",
        from = "Column::PostId",
        to = "super::posts::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Posts,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::posts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Posts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
