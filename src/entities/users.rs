//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Users")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_name = "Reputation")]
    pub reputation: i32,
    #[sea_orm(column_name = "CreationDate")]
    pub creation_date: Option<DateTime>,
    #[sea_orm(column_name = "DisplayName")]
    pub display_name: Option<String>,
    #[sea_orm(column_name = "LastAccessDate")]
    pub last_access_date: Option<DateTime>,
    #[sea_orm(column_name = "WebsiteUrl")]
    pub website_url: Option<String>,
    #[sea_orm(column_name = "Location")]
    pub location: Option<String>,
    #[sea_orm(column_name = "ProfileImageUrl")]
    pub profile_image_url: Option<String>,
    #[sea_orm(column_name = "AboutMe", column_type = "Text", nullable)]
    pub about_me: Option<String>,
    #[sea_orm(column_name = "Views")]
    pub views: Option<i32>,
    #[sea_orm(column_name = "UpVotes")]
    pub up_votes: Option<i32>,
    #[sea_orm(column_name = "DownVotes")]
    pub down_votes: Option<i32>,
    #[sea_orm(column_name = "Age")]
    pub age: Option<i32>,
    #[sea_orm(column_name = "AccountId")]
    pub account_id: Option<i32>,
    #[sea_orm(column_name = "EmailHash")]
    pub email_hash: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::badges::Entity")]
    Badges,
    #[sea_orm(has_many = "super::votes::Entity")]
    Votes,
}

impl Related<super::badges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Badges.def()
    }
}

impl Related<super::votes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Votes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
