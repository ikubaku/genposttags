//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Posts")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_name = "PostTypeId")]
    pub post_type_id: Option<i8>,
    #[sea_orm(column_name = "AcceptedAnswerId")]
    pub accepted_answer_id: Option<i32>,
    #[sea_orm(column_name = "ParentId")]
    pub parent_id: Option<i32>,
    #[sea_orm(column_name = "CreationDate")]
    pub creation_date: Option<DateTime>,
    #[sea_orm(column_name = "DeletionDate")]
    pub deletion_date: Option<DateTime>,
    #[sea_orm(column_name = "Score")]
    pub score: Option<i32>,
    #[sea_orm(column_name = "ViewCount")]
    pub view_count: Option<i32>,
    #[sea_orm(
        column_name = "Body",
        column_type = "Custom(\"MEDIUMTEXT\".to_owned())",
        nullable
    )]
    pub body: Option<String>,
    #[sea_orm(column_name = "OwnerUserId")]
    pub owner_user_id: Option<i32>,
    #[sea_orm(column_name = "OwnerDisplayName")]
    pub owner_display_name: Option<String>,
    #[sea_orm(column_name = "LastEditorUserId")]
    pub last_editor_user_id: Option<i32>,
    #[sea_orm(column_name = "LastEditorDisplayName")]
    pub last_editor_display_name: Option<String>,
    #[sea_orm(column_name = "LastEditDate")]
    pub last_edit_date: Option<DateTime>,
    #[sea_orm(column_name = "LastActivityDate")]
    pub last_activity_date: Option<DateTime>,
    #[sea_orm(column_name = "Title")]
    pub title: Option<String>,
    #[sea_orm(column_name = "Tags")]
    pub tags: Option<String>,
    #[sea_orm(column_name = "AnswerCount")]
    pub answer_count: Option<i32>,
    #[sea_orm(column_name = "CommentCount")]
    pub comment_count: Option<i32>,
    #[sea_orm(column_name = "FavoriteCount")]
    pub favorite_count: Option<i32>,
    #[sea_orm(column_name = "ClosedDate")]
    pub closed_date: Option<DateTime>,
    #[sea_orm(column_name = "CommunityOwnedDate")]
    pub community_owned_date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::AcceptedAnswerId",
        to = "Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    SelfRef1,
    #[sea_orm(
        belongs_to = "super::post_type::Entity",
        from = "Column::PostTypeId",
        to = "super::post_type::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    PostType,
    #[sea_orm(has_many = "super::comments::Entity")]
    Comments,
    #[sea_orm(has_many = "super::post_history::Entity")]
    PostHistory,
    #[sea_orm(has_many = "super::votes::Entity")]
    Votes,
}

impl Related<super::post_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostType.def()
    }
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::post_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostHistory.def()
    }
}

impl Related<super::votes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Votes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
